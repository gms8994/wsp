-- Copyright 2017 Maximilian Montserrat, email me at maximthemagnificent@gmail.com with any questions, comments, suggestions, etc.
-- Note that efficiency was deliberately sacrificed for clarity.

-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
-- files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
-- modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
-- the Software is furnished to do so, subject to the following conditions:

-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
-- OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
-- IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-- This script processes played and skipped songs for the WSP music system.
-- 1) It sets played and skipped dates to be the most recent of the two, and shifts them into the past for easy detection of new activity
-- 2) Ratings are updated based on the time interval between the last attempt and the current one, and whether or not it was played or skipped (if both, the rating is not altered)
--     Note that because the played and skipped dates are the same, the one that is not changed preserves the last attempted date





-- user control parameters
property RATING_REPEAT_INTERVAL : 7 -- repeat interval, in days, per rating tick (r = 100: 1 * interval, r = 99: 2 * interval, etc.   r = 1: 100 * interval, note r = 0 means unrated )
property SKIP_LEARN_RATE : 0.9 -- when skipped, new rating is set to old_rating + (new_rating-old_rating) * skip_learn_rate
property PLAY_LEARN_RATE : 0.3 -- when played, new rating is set to old_rating + (new_rating-old_rating) * play_learn_rate
property PLAYED_FIRST_TIME_RATING : 100 -- since there's no time period the first time a song is attempted, what rating do I use if it's played?
property SKIPPED_FIRST_TIME_RATING : 90 -- since there's no time period the first time a song is attempted, what rating do I use if it's skipped?

-- advanced control parameters; not much reason to adjust these
property SONGS_TO_PROCESS : "WSP test" -- debugging temporary source playlist, change to "WSP todo" later
property DATE_PAST_OFFSET : 365.25 * 20.0 -- amount to shift play and skip dates into the past, in days








-- function to compute rating corresponding to time since last attempt
on CalcElaspedEquivRating(attempted_date, last_attempted_date)
	
	-- compute time since last attempt
	if (last_attempted_date as string) is equal to "missing value" then
		set unadj_lastDate to (current date) + (DATE_PAST_OFFSET * days)
	else
		set unadj_lastDate to last_attempted_date + (DATE_PAST_OFFSET * days) -- add back in past-shifitng date offset
	end if
	set elapsed_time to attempted_date - unadj_lastDate -- elapsed time, in seconds
	
	-- compute rating that corresponds to actual time interval since last attempt
	set attempted_rating to 101 - elapsed_time / (3600 * 24 * RATING_REPEAT_INTERVAL)
	
	-- check bounds
	if attempted_rating < 1 then
		set attempted_rating to 1
	else if attempted_rating > 100 then
		set attempted_rating to 100
	end if
	
	return attempted_rating
	
end CalcElaspedEquivRating





tell application "iTunes"
	
	set scriptDate to (current date) -- get current date
	set modDateThresh to scriptDate - (DATE_PAST_OFFSET * days) -- date to detect when a play or skip has occurred
	
	
	-- process songs that have been played, skipped, or simply are new to the WSP system
	if ((exists user playlist SONGS_TO_PROCESS) and ((count tracks) of user playlist SONGS_TO_PROCESS is not 0)) then
		set input to get every track of user playlist SONGS_TO_PROCESS
		if (input is not {}) then
			
			set old_i to fixed indexing -- enable fixed indexing
			set fixed indexing to true
			
			-- iterate through tracks that have been played or skipped
			repeat with aTrack in input
				
				-- fetch track attempt date info
				set pDate to played date of aTrack
				set sDate to skipped date of aTrack
				
	
				if (pDate as string) is equal to "missing value" then

					if (sDate as string) is equal to "missing value" then
					
						display dialog "Both play and skip dates were missing! Invalid case!"
					else
						set rating of aTrack to SKIPPED_FIRST_TIME_RATING     -- first attempt, skipped!
					end if

				else if pDate > modDateThresh then -- song was played
					
					if (sDate as string) is equal to "missing value" then
					
						set rating of aTrack to PLAYED_FIRST_TIME_RATING	-- first attempt, played!

					else if sDate â‰¤ modDateThresh then -- legit play
						
						set new_r to CalcElaspedEquivRating(pDate, sDate) of me -- compute rating corresponding to time since last attempt
						set attempted_rating to new_r
						
						-- if better than current, increase rating
						set r to rating of aTrack
						
						if attempted_rating > r then
							
							set new_r to round (r + (attempted_rating - r) * PLAY_LEARN_RATE)
							set rating of aTrack to new_r
							
						end if
						
					end if
					
				else -- song was skipped
					
					-- if skipped date is missing here but the played date was processed to be in the past, that's a bug! Will fail here.
					
					set new_r to CalcElaspedEquivRating(sDate, pDate) of me -- compute rating corresponding to time since last attempt
					set attempted_rating to new_r
						
					-- if worse than current, decrease rating
					set r to rating of aTrack
						
					if attempted_rating < r then
							
						set new_r to round (r + (new_r - r) * SKIP_LEARN_RATE)
						set rating of aTrack to new_r
							
					end if

				end if
				
				
				-- reset play and skipped dates
				set most_recent_attempt to pdate

				if (pDate as string) is equal to "missing value" then       -- one of the dates must be valid or it's a bug! Checked for earlier.
					set most_recent_attempt to sDate
				else if (sDate as string) is not equal to "missing value" then
					if sDate > most_recent_attempt then
						set most_recent_attempt to sDate
					end if
				end if
				
				set adj_attempted_date to most_recent_attempt - (DATE_PAST_OFFSET * days)
				
				set played date of aTrack to adj_attempted_date
				set skipped date of aTrack to adj_attempted_date
				
			end repeat
			set fixed indexing to old_i
		end if
	end if
	
end tell
